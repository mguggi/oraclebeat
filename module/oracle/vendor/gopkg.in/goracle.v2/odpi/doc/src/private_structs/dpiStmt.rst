.. _dpiStmt:

ODPI-C Private Structure dpiStmt
--------------------------------

This private structure represents statements of all types (queries, DML, DLL
and PL/SQL) and is available by handle to a calling application or driver. The
implementation of this type is found in dpiStmt.c. Statements are created by
calling the function :func:`dpiConn_prepareStmt()` or the function
:func:`dpiSubscr_prepareStmt()`. They are also created implicitly when a
variable of type DPI_ORACLE_TYPE_STMT is created. Statement handles can be
closed by calling the function :func:`dpiStmt_close()` or by releasing the last
reference to the statement by calling the function :func:`dpiStmt_release()`.
All of the attributes of the structure :ref:`dpiBaseType<dpiBaseType>` are
included in this structure in addition to the ones specific to this structure
described below.

.. member:: dpiConn \*dpiStmt.conn

    Specifies a pointer to the :ref:`dpiConn<dpiConn>` structure which was used
    to create the statement.

.. member:: OCIStmt \*dpiStmt.handle

    Specifies the OCI statement handle.

.. member:: uint32_t dpiStmt.fetchArraySize

    Specifies the number of rows that will be fetched internally every time
    more rows need to be fetched from the database. This value can be changed
    by calling the function :func:`dpiStmt_setFetchArraySize()`. When this
    value is changed all of the defined variables in the member
    :member:`dpiStmt.queryVars` are checked to ensure that they have enough
    space to accommodate the number of rows identified here.

.. member:: uint32_t dpiStmt.bufferRowCount

    Specifies the number of rows that are currently available in fetch buffers
    from the last internal fetch that was made, or 0 if no internal fetch has
    been performed.

.. member:: uint32_t dpiStmt.bufferRowIndex

    Specifies the 0-based index into the fetch buffers of the current row. If
    this value is greater than or equal to the value of the member
    :member:`dpiStmt.bufferRowCount` a new internal fetch will need to take
    place during the next call to the function :func:`dpiStmt_fetch()` or
    the function :func:`dpiStmt_fetchRows()`, unless the value of the member
    :member:`dpiStmt.hasRowsToFetch` is set to 0.

.. member:: uint32_t dpiStmt.numQueryVars

    Specifies the size of the arrays found in the members
    :member:`dpiStmt.queryVars` and :member:`dpiStmt.queryInfo`.

.. member:: dpiVar \**dpiStmt.queryVars

    Specifies an array of pointers to :ref:`dpiVar<dpiVar>` structures, or NULL
    if the statement does not refer to a query or the query has not yet been
    executed (and therefore the number of columns being queried is still
    unknown). Each element of the array can be NULL if no variable has yet been
    defined in that position. This array will be fully populated, however, once
    the first call to the function :func:`dpiStmt_fetch()` or the function
    :func:`dpiStmt_fetchRows()` is made. All array positions that are still
    NULL will be created with variables using the query metadata.

.. member:: dpiQueryInfo \*dpiStmt.queryInfo

    Specifies an array of :ref:`dpiQueryInfo<dpiQueryInfo>` structures, or NULL
    if the statement does not refer to a query or the query has not yet been
    executed (and therefore the number of columns being queried is still
    unknown).

.. member:: uint32_t dpiStmt.allocatedBindVars

    Specifies the size of the array found in the member
    :member:`dpiStmt.bindVars`.

.. member:: uint32_t dpiStmt.numBindVars

    Specifies the number of variables which have been bound to the statement.
    This number also refers to the number of elements in the array found in the
    member :member:`dpiStmt.bindVars` which contain valid information.

.. member:: dpiBindVar \*dpiStmt.bindVars

    Specifies an array of :ref:`dpiBindVar<dpiBindVar>` structures which are
    used to keep track of the variables which have been bound to the statement.
    References are held to the bound variables so that the memory associated
    with them remains valid for as long as the statement requires them.

.. member:: uint32_t dpiStmt.numBatchErrors

    Specifies the size of the array found in the mmber
    :member:`dpiStmt.batchErrors`.

.. member:: dpiErrorBuffer \*dpiStmt.batchErrors

    Specifies an array of :ref:`dpiErrorBuffer<dpiErrorBuffer>` structures
    which are populated with the batch errors generated by the last call to the
    function :func:`dpiStmt_executeMany()` with the mode
    DPI_MODE_EXEC_BATCH_ERRORS.

.. member:: uint64_t dpiStmt.rowCount

    Specifies the number of rows that were affected by the last DML statement
    or the number of rows that have been fetched from a query.

.. member:: uint64_t dpiStmt.bufferMinRow

    Specifies the row number of the first row found in the fetch buffers. This
    value is used internally during calls to the function
    :func:`dpiStmt_scroll()` in order to ensure that relative scrolling works
    as expected (adjustments are needed due to internal fetching).

.. member:: uint16_t dpiStmt.statementType

    Specifies the type of statement that was prepared. It will be one of the
    values from the enumeration :ref:`dpiStatementType<dpiStatementType>`.

.. member:: int dpiStmt.isOwned

    Specifies if the OCI statement handle found in the member
    :member:`dpiStmt.handle` is owned by the structure (1) or not (0).
    Statement handles that are owned by the structure must be freed when the
    structure itself is freed; otherwise, the OCI library performs the free
    itself when the statement is removed from the statement cache.

.. member:: int dpiStmt.hasRowsToFetch

    Specifies if there are potentially more rows to fetch from the database (1)
    or not (0).

.. member:: int dpiStmt.scrollable

    Specifies if the query is capable of being scrolled (1) or not (0).

.. member:: int dpiStmt.isReturning

    Specifies if the query contains a RETURNING clause (1) or not (0).

.. member:: int dpiStmt.deleteFromCache

    Specifies if the query should be deleted from the statement cache (1) or
    not (0). If this value is set to 1, when the statement is released back to
    the statement cache it will also be dropped in order to avoid cache issues
    due to metadata changes, for example. This value is set to 1 if an error
    takes place during statement execution unless it is a unique key violation.
    Some errors (ORA-01007, for example) result in the statement being
    re-prepared and re-executed instead.

